# VoronoiCells

[![Build Status](https://travis-ci.org/JuliaGeometry/VoronoiCells.jl.svg?branch=master)](https://travis-ci.org/JuliaGeometry/VoronoiCells.jl)
[![codecov.io](https://codecov.io/github/JuliaGeometry/VoronoiCells.jl/coverage.svg?branch=master)](https://codecov.io/github/JuliaGeometry/VoronoiCells.jl?branch=master)

*VoronoiCells* use the [VoronoiDelaunay](https://github.com/JuliaGeometry/VoronoiDelaunay.jl) package to compute the vertices and areas of the Voronoi cells in a tessellation.
Furhtermore, *VoronoiCells* handles interaction with the specified observation rectangle.


## Installation

Switch to `Pkg` mode in Julia with `]` and run

```julia; eval = false
add VoronoiCells
```


## Usage

For specifying 2D points I use the [GeometryBasics package](https://github.com/JuliaGeometry/GeometryBasics.jl).
Using the [Plots package](https://github.com/JuliaPlots/Plots.jl) we can easily visualize Voronoi tesselations.

```julia
using VoronoiCells
using GeometryBasics
using Plots
```

```julia; echo = false, results = "hidden"
pyplot()
using Random
```

First make a vector of points and a rectangle that contains the points:

```julia
Random.seed!(1337)
rect = VoronoiCells.Rectangle(Point2(0, 0), Point2(1, 1))
points = [Point2(rand(), rand()) for _ in 1:10]
```

The main function of *VoronoiCells* is `voronoicells` that computes the cell of each generator point.

```julia
tess = voronoicells(points, rect)
tess.Cells[1]
```

The output `tess` is a struct.
The corners of the Voronoi cells of the `n`'th generator is available as `tess.Cells[n]`.

The edges of the Voronoi cells can be plotted easily and then we can add the generators afterwards:

```julia; label = "tesselation.png"; out_width = "8cm"; out_height = "8cm"
plot(tess)
scatter!(points, markershape = :circle, markersize = 6, label = "generators")
```

The function `voronoiarea` computes the area of each Voronoi cell:

```julia
voronoiarea(tess)
```


## Technical notes

For technical reasons the *VoronoiDelaunay* package includes the corner points of the rectangle in the set of generators.
The way *VoronoiCells* circumvents this is explained in the [attached document](doc/remove_bounding_box.md).

My main interest is the area of the Voronoi cells and not the cells *per se*. 
The current representation of a cell as its corners in a vector is by no means set in stone, so reach out if you think another representation is more suitable.


# Weave

This README is generated with the [Weave package](https://github.com/JunoLab/Weave.jl) using the command

```julia; eval = false
weave("README.jmd", doctype = "github", fig_path = "doc")
```

